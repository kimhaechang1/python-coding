# 어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 한다.
# 단, 두 번째 연산은 N이 K로 나누어 떨어질 때만 선택 할 수 있다.
# 1. N에서 1을 뺀다.
# 2. N을 K로 나눈다.

# 예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다.
# 이후에 2번의 과정으로 두 번 수행하면, N은 1이 된다.
# 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 된다. 이는 N을 1로 만드는 최소 횟수이다.
#
# N과 K가 주어질 때 N이 1이 될 때 까지 1번 혹은 2번의 과정을 수행해야하는 최소 횟수를 구하는 프로그램을 작성하시오.

# 입력 조건
# 첫째 줄에 N(2<=N<=100000) 과 K(2<=K<=100000)가 공백으로 구분되며 각각 자연수로 주어진다.
# 이 때 입력으로 주어지는 N은 항상 K보다 크거나 같다.

# 출력 조건
# 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.

# 입력 예시
# 25 5

# 출력 예시
# 2


# 1. N = N-1
# 2. if N%K == 0 => N//K

# N을 K로 나눈 나머지 만큼만 1번을 수행하고 몫은 2번을 수행하는 횟수이다.
# while True하여 종료조건을 N이 1이 되는 순간으로 한다
# N%K가 0이면 N=N//K로 하고 count+=1 후 while문 진행,
# 아니라면 N= N-(N%K)를 해준뒤 count+=(N%K)



def solution(n, k):
    count = 0
    while True:
        if n == 1:
            break
        elif n%k == 0:
            n = n//k
            count+=1
        else :
            count += (n % k)
            n = n-(n%k)
    return count


n,k = map(int, input().split())
print(solution(n,k))

# 문제 해설
# 최대한 많이 나누면 된다
# 즉 2이상의 수로 나누는 것이 1을 빼는 것 보다 숫자를 훨 씬 많이 줄일 수 있기 때문이다.
# 여기서 K가 2 이상의 자연수 이므로 가능하면 나누는 것이 항상 숫자를 더 빠르게 줄이는 방법이 된다.
