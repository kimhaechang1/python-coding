# 문제 설명
# 점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.
#
# 전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.
#
# 제한사항
# 전체 학생의 수는 2명 이상 30명 이하입니다.
# 체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
# 여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
# 여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.
# 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.
# 입출력 예
# n	lost	reserve	return
# 5	[2, 4]	[1, 3, 5]	5
# 5	[2, 4]	[3]	4
# 3	[3]	[1]	2
# 입출력 예 설명
# 예제 #1
# 1번 학생이 2번 학생에게 체육복을 빌려주고, 3번 학생이나 5번 학생이 4번 학생에게 체육복을 빌려주면 학생 5명이 체육수업을 들을 수 있습니다.
#
# 예제 #2
# 3번 학생이 2번 학생이나 4번 학생에게 체육복을 빌려주면 학생 4명이 체육수업을 들을 수 있습니다.
#
# 출처
#
# ※ 공지 - 2019년 2월 18일 지문이 리뉴얼되었습니다.
# ※ 공지 - 2019년 2월 27일, 28일 테스트케이스가 추가되었습니다.
# ※ 공지 - 2021년 7월 28일 테스트케이스가 추가되었습니다.
# ※ 공지 - 2021년 8월 30일 테스트케이스가 추가되었습니다.

def solution(n, lost, reserve):
    reserve_only = set(reserve) - set(lost)
    lost_only = set(lost) - set(reserve)
    result = []
    for reserve in reserve_only : # 여벌 있는 사람들 기준으로
        front = reserve-1
        back = reserve+1
        if front in lost_only:
            lost_only.remove(front)
        elif back in lost_only:
            lost_only.remove(back)
    answer = n - len(lost_only)
    return answer


## 도저히 풀지 못함
# "중복이 없다" 라는 말과 "여벌의 체육복이 있는 학생도 도난 당했을 수도 있다" 는 점이 중요하다.
# 중복이 없다 라는 말은 set과 같이 중복된 요소가 없다는 의미
# 하지만 "여벌의 체육복이 있는 학생도 도난 당했을 수도 있다" 라는 점에서
# lost배열과 reserve배열의 중복되어 등록되어 있는 학생이 있을 수 있다는 얘기이다.
# 그럼 진짜 체육복이 없는 사람들에게 여유가 있는사람이 나누어 주어야 한다.
# 따라서 진짜 체육복이 없는 사람과 진짜 여유가 있는 사람을 찾아야 한다.
# 그걸 하기 위해서는 두 객체 사이 집합 연산이 가능한 set을 이용하면 쉬워진다.
# 차집합을 통해 진짜 있는 학생의 번호와 없는 학생의 번호를 구하고
# 여유있는 학생의 번호를 기준으로 for문을 돌아 앞번호와 뒷번호 중 진짜 없는 학생을 찾는다.
# 그리고 체육복을 줬다면 진짜 없는 학생의 번호는 lost_only에서 지워져야 한다.

# 마지막으로 전체 학생에서 lost_only에 속해있는 즉, 체육복을 물려주고도 없는 학생들을 빼 준다면 수업을 들을 수 있는 학생수가 나온다.

# 풀지 못했던 이유

# 1. 그리디가 뭔지 몰랐다.
# 그리디 알고리즘은 최적해를 구하는데 사용되는 근사적인 방법으로 여러 경우 중 하나를 결정해야 할 때마다 그 '순간'에 최적이라고 생각되는 것을 선택해 나가는 방식

# https://rain-bow.tistory.com/entry/DP%EC%99%80-Greedy-Algorithm

# 2. 전처리를 재대로 해주지 않았다
# 전체 학생 배열을 만들어서 사람당 체육복 개수를 넣어놨는데
# 이러면 앞뒤 방문하면서 찾아야 하고 또 out of range 나기 쉽다.

# 3. 이미 학생 번호를 기준으로 풀고 있는데 학생을 기준으로 풀려고 한다.
# 이건 번호를 기준으로 풀려고 했으면 굳이 배열을 새로만들 필요도 없다.

# 다음엔 두 리스트가 나오고 서로 중복되는 요소가 존재한다면
# 독립적인 두 리스트를 만들려고 해보자.


def solution(n, lost, reserve):
    reserve_only = set(reserve) - set(lost)
    lost_only = set(lost) - set(reserve)
    for reserve in reserve_only : # 여벌 있는 사람들 기준으로
        front = reserve-1
        back = reserve+1
        if front in lost_only:
            lost_only.remove(front)
        elif back in lost_only:
            lost_only.remove(back)
    answer = n - len(lost_only)
    return answer


