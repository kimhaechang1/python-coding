# 통계학
#
# 시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
# 2 초	256 MB	92355	18830	15308	25.425%
# 문제
# 수를 처리하는 것은 통계학에서 상당히 중요한 일이다. 통계학에서 N개의 수를 대표하는 기본 통계값에는 다음과 같은 것들이 있다. 단, N은 홀수라고 가정하자.
#
# 산술평균 : N개의 수들의 합을 N으로 나눈 값
# 중앙값 : N개의 수들을 증가하는 순서로 나열했을 경우 그 중앙에 위치하는 값
# 최빈값 : N개의 수들 중 가장 많이 나타나는 값
# 범위 : N개의 수들 중 최댓값과 최솟값의 차이
# N개의 수가 주어졌을 때, 네 가지 기본 통계값을 구하는 프로그램을 작성하시오.
#
# 입력
# 첫째 줄에 수의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 단, N은 홀수이다. 그 다음 N개의 줄에는 정수들이 주어진다. 입력되는 정수의 절댓값은 4,000을 넘지 않는다.
#
# 출력
# 첫째 줄에는 산술평균을 출력한다. 소수점 이하 첫째 자리에서 반올림한 값을 출력한다.
#
# 둘째 줄에는 중앙값을 출력한다.
#
# 셋째 줄에는 최빈값을 출력한다. 여러 개 있을 때에는 최빈값 중 두 번째로 작은 값을 출력한다.
#
# 넷째 줄에는 범위를 출력한다.
#
# 예제 입력 1
# 5
# 1
# 3
# 8
# -2
# 2
# 예제 출력 1
# 2
# 2
# 1
# 10
# 예제 입력 2
# 1
# 4000
# 예제 출력 2
# 4000
# 4000
# 4000
# 0
# 예제 입력 3
# 5
# -1
# -2
# -3
# -1
# -2
# 예제 출력 3
# -2
# -2
# -1
# 2
# 예제 입력 4
# 3
# 0
# 0
# -1
# 예제 출력 4
# 0
# 0
# 0
# 1
# (0 + 0 + (-1)) / 3 = -0.333333... 이고 이를 첫째 자리에서 반올림하면 0이다. -0으로 출력하면 안된다.



# N은 무조건 홀수

# 수의 범위가 작음 (0<n<4000)

# 산술평균 (a1+a2+...+an)/ n , 소수점 이하 첫째자리에서 반올림 -> round
# 중앙값 : 오름차순 정렬 시 가운데 값
# 최빈값 : 계수정렬 써야함
# 범위 : 최대 - 최소

"""
입력값으로 받은 수들을 전부 리스트에 저장
sum() 으로 합을 구하고 n으로 나누고 이 값을 round()
계수정렬을 위해 수들의 빈도수를 측정할 수들의 리스트
nums = [0]*4001 사용



중앙값은 n/2을 올림 한 숫자 번째 의 수가 중앙값
최빈 값은 계수정렬
범위는 min, max
"""
import sys
import collections

def avg(l,n):
    print(round(sum(l)/n))

def mid(l,n):
    l = sorted(l)
    print(l[n//2])

def fre(l,n):
    ld = collections.Counter(l)
    ld = sorted(ld.items(), key = lambda x : x[1], reverse=True)
    m = ld[0][1]
    temp = []
    for key, value in ld :
        if m == value:
            temp.append(key)
    temp = sorted(temp)
    if len(temp)>1:
        print(temp[1])
    else:
        print(temp[0])

def bound(l):
    print(max(l)-min(l))


n = int(sys.stdin.readline())
l = []
for i in range(n):
    l.append(int(sys.stdin.readline()))

avg(l,n)
mid(l,n)
fre(l,n)
bound(l)



